<?php

/**
 *@file
 *Write what this file does
 *Goal: Add a panel to Tripal feature page (gene)
 *
 */


/**
 *MY Strategy:
 *Strategy:
 *Create a panel 'Gene Expression' in feature view (gene page) (in .module).
 *Specify a template for this panel (in .module).
 *Develop the template and other accessory files (.inc, .js, .css, etc.) 
 *to get the data from ongenomesimple schema and present it.
 *
 */

 
//  FIND OUT/(TEST) IF THIS FILE IS NECESSARY??? 
/**
 *require('lis_expression.chado_node.inc'); //Has hook_node_view() function to add new panel(name, toc) to feature node
 *hook_node_view() function now in this .module file.
 */

require_once drupal_get_path('module', 'lis_expression').'/includes/lis_expression_helper_functions.inc';  
        //require_once 'includes/lis_expression_helper_functions.inc'; //works but fails to load call 

drupal_add_js(drupal_get_path('module', 'lis_expression').'/js/plotly-latest.min.js');  // version 1.34.0 downloaded on 2018-02-20
drupal_add_js(drupal_get_path('module', 'lis_expression').'/js/lis_expression_jsFunctions.js'); // Only this format works
      //Fails  [drupal_add_js('js/lis_expression_jsFunctions.js');]




/**
 * Implements hook_views_api().
 *
 * Essentially this hook tells drupal that there is views support for
 *  for this module which then includes tripal_db.views.inc where all the
 *  views integration code is located.
 *
 * @ingroup tripal_analysis_expression  //CHANGE THIS <<<<<<
 */
function lis_expression_views_api() {
  return array(
    'api' => 3.0,
  );
}

//drupal_set_message(var_dump($variables));


/*
 * Implements hook_menu_alter
 * Adding menu items to the pre existing array of menu items for the tripal_gene page
 */

function lis_expression_menu_alter(&$items) {
      //$items = array(); //The tripal_gene module already has the $items array. This adds to thhat array
      // All the call back functions are in lis-expression_helper_functions.inc
  
      //For expression data for the gene
  $items['lis_expression/%/%/json'] = array(
        'page callback' => 'get_exprsn_data_as_json',
        'page arguments' => array(1, 2), //ex: lis_expression/phavu1/Phvul.001G000600.v1.0/json
        'type' => MENU_CALLBACK,
        'access callback' => TRUE // allow all anonymous http clients
  );
  
      //For Metadata for dataset and samples
  $items['lis_expression/dataset_metadata/%/json'] = array(
        'page callback' => 'get_dataset_metadata_as_json',
        'page arguments' => array(2), //ex: /lis_expression/dataset_metadata/phavu1/json
        'type' => MENU_CALLBACK,
        'access callback' => TRUE 
  );

/*  
      //For profile-neighbors in json format
  $items['lis_expression/profile_neighbors/%/%/json'] = array(
        'page callback' => 'get_profile_neighbors_expression_json',
        'page arguments' => array(2, 3), //ex: lis_expression/profile_neighbors/phavu1/Phvul.001G000600.v1.0/json
        'type' => MENU_CALLBACK,
        'access callback' => TRUE 
  );
*/
        //NEW TRYING
        //For profile-neighbors in json format
  //$items['lis_expression/profile_neighbors/%/%/newjson'] = array(
  $items['lis_expression/profile_neighbors/%/%/json'] = array(
        //'page callback' => 'new_get_profile_neighbors_expression_json',
        'page callback' => 'get_profile_neighbors_expression_json',
        'page arguments' => array(2, 3), //ex: lis_expression/profile_neighbors/phavu1/Phvul.001G000600.v1.0/XXnewXXjson
        'type' => MENU_CALLBACK,
        'access callback' => TRUE 
  );


        //For family members in json format
  $items['lis_expression/genefamily_members/%/%/json'] = array(
        'page callback' => 'get_family_members_expression_json',
        'page arguments' => array(2, 3), //ex:lis_expression/genefamily_members/phavu1/Phvul.001G000600.v1.0/json
        'type' => MENU_CALLBACK,
        'access callback' => TRUE 
  );
  
        //For lis_expression page
  $items['lis_expression/all'] = array(
        'page callback' => 'summarize_all_lis_expression_callback', // in includes/lis_expression_helper_functions.inc
        //'page arguments' => array(2, 3), //
        'type' => MENU_CALLBACK,
        'access callback' => TRUE 
  );
  
        //For lis_expression page
  $items['lis_expression/demo'] = array(
        'page callback' => 'lis_expression_demo_callback', // in includes/lis_expression_helper_functions.inc
        //'page arguments' => array(2, 3), //
        'type' => MENU_CALLBACK,
        'access callback' => TRUE 
  );
  
  
  //return $items; //Don't return. Because: The tripal_gene module already has the $items array. This adds to that array
}  //_menu_alter



// ****NOTE****: theme name 'lis_expression_profiles' used in chado_node.inc [in fn lis_expression_node_view(]
/**
 * Implements hook_node_view().
 *
 * @ingroup tripal_exp_profiles // MODIFY or REMOVE <<<<
 */

function lis_expression_node_view($node, $view_mode, $langcode) {
  switch ($node->type) {
    case 'chado_feature':
      // Show feature browser and counts
      if ($view_mode == 'full') {          
        
        $node->content['lis_expression'] = array(
          '#markup' => theme('lis_expression_profiles', array('node' => $node)),  //theme name: 'lis_expression_profiles'
          '#tripal_toc_id'    => 'geneexpressionprofile',
          '#tripal_toc_title' => 'Expression',
          '#weight' => -80,
        );
        /*For overriding the tripal_analysis_expression module's template
         *'tripal_analysis_expression/theme/templates/tripal_feature_expression.tpl.php' with
         * this module's 'tripal_exp_profiles/theme/templates/tripal_feature_expression.tpl.php' modified
         * by me to suit LIS needs.
         * 
        */
        //$node->content['tripal_feature_expression'] = array(
        //'#markup' => theme('tripal_feature_expression', array('node' => $node)),
        //'#tripal_toc_id' => 'figure',
        //'#tripal_toc_title' => 'Expression',
        //'#weight' => -99,
        //);
      } //if
      break;
  } //sw
} //f()


//Next create the hook_theme()  from


/**
 * Implements hook_theme().
 *
 * We need to let drupal know about our theme functions and their arguments.
 *  We create theme functions to allow users of the module to customize the
 *  look and feel of the output generated in this module
 *
 * @ingroup ?????
 */
function lis_expression_theme($existing, $type, $theme, $path) {
    $this_path = drupal_get_path('module', 'lis_expression');
    
    $items = array(
        
        //for tripal_feature page 'New panel'
        'lis_expression_profiles' => array(
            'variables' => array('node' => NULL),
            //'template' => 'lis_expression.old1',
            //'template' => 'lis_expression.old2', //template2 while trying refactoring code
            //'template' => 'lis_expression.old3', //while refactoring code w/o drupal ajax-form (using jQ instead)
            'template' => 'lis_expression', // lis_expression.old3 + tabs for this-gene, neighbors, family, metadata
            'path' => "$this_path/theme/templates",  //$this_path/theme/templates/tripal_feature_exp_profiles.tpl.php created
        ),
        
        //for lis_expression/all  summary page
        'lis_expression_all' => array(
            'template' => 'lis_expression_all_summary',
            'path' => "$this_path/theme/templates",
        ),
        
        //for lis_expression/demo  summary page
        'lis_expression_demo' => array(
            'template' => 'lis_expression_demo_workshop',
            'path' => "$this_path/theme/templates",
        ),
        
    );
        
    return $items;
  
}

// -------------  Don't touch the code above this line  ---------------------
//###########################################################################

   

//  SECTION:  Template Preprocess  =======================================
//                  (To pass vars from .module to .tpl.php)

    //Using template_preprocess(); so 'template' to be replaced by template name defined above in _theme()
    //  (CAUTION:  there is a chance that it could be the 'module-name' instead of the template-name)
function lis_expression_preprocess(&$variables) {
    
    
    //Get the feature node from $variables
    $feature = $variables['node']->feature;
    $feature_id = $feature->geature_id;
    
    $feature_type_name = $feature->type_id->name;  //is feature type='gene'
    $gene_uniquename = $feature->uniquename;
    $gene_name = $feature->name;
    $organism_id = $feature->organism_id->organism_id;
    $genus = $feature->organism_id->genus;
    $species = $feature->organism_id->species;

    $variables['feature_type_name'] = $feature_type_name;
    $variables['gene_uniquename'] = $gene_uniquename;
    $variables['gene_name'] = $gene_name;
    $variables['organism_id'] = $organism_id;
    $variables['genus'] = $genus;
    $variables['species'] = $species;

    
    
    ////Number of Datasets available for this gene
    $sql_get_datasets = "SELECT DISTINCT d.dataset_id, d.shortname, d.accession_no FROM ongenome.dataset d, ongenome.expressiondata e, ongenome.genemodel gm  WHERE d.dataset_id=e.dataset_id  and e.genemodel_id = gm.genemodel_id and gm.chado_uniquename = :gene_uniquename";  //ongenome
    $result_get_datasets = db_query($sql_get_datasets, array(':gene_uniquename' => $gene_uniquename));
    $dataset_count = $result_get_datasets->rowCount();
    //
    $variables['dataset_count'] = $dataset_count;

    
    $count = 0;
    $accession_no = '';
    global $dataset_shortname;
    $dataset_shortname = '';
    foreach ($result_get_datasets as $rec) {
        $count = $count + 1;
        $dataset_id = $rec->dataset_id;
        $dataset_accession_no = $rec->accession_no;
        $dataset_shortname = $rec->shortname;
        //print $count."."."<b>"."&nbsp;&nbsp;".$dataset_accession_no.": "."</b>".$dataset_shortname."<br/>";
        //print "<b>".$rec->shortname."</b>"." (dataset_id:".$rec->dataset_id.")"."<br/>";
    }
  
    $variables['dataset_id'] = $dataset_id;
    $variables['dataset_accession_no'] = $dataset_accession_no;
    $variables['dataset_shortname'] = $dataset_shortname;
    
}  //template preprocess



//####   AVAILABLE VARIABLES

  //Available Variables:
  //print '<pre>';var_dump(get_defined_vars()); print '</pre>';     


//####   DEFINED FUNCTIONS FOR TESTING ####



///////////////////     IGNORE:  SCRATCH & OBSOLETE      /////////////////////// 
////////////////////////////////////////////////////////////////////////////////
