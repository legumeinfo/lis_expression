<?php

/**
 *@file
 *Write what this file does
 *Goal: Add a panel to Tripal feature page (gene)
 *
 */


/**
 *MY Strategy:
 *Strategy:
 *Create a panel 'Gene Expression' in feature view (gene page) (in .module).
 *Specify a template for this panel (in .module).
 *Develop the template and other accessory files (.inc, .js, .css, etc.) 
 *to get the data from ongenomesimple schema and present it.
 *
 */

 
//  FIND OUT/(TEST) IF THIS FILE IS NECESSARY??? 
/**
 *require('includes/lis_expression.chado_node.inc'); //File created: Will need it for adding
 *a new panel(name, toc) to feature node
*/

//Inactivated for testing. This includes the hook_node_view() function.
//require("lis_expression.chado_node.inc");

require_once 'includes/lis_expression_helper_functions.inc';


/**
 * Implements hook_views_api().
 *
 * Essentially this hook tells drupal that there is views support for
 *  for this module which then includes tripal_db.views.inc where all the
 *  views integration code is located.
 *
 * @ingroup tripal_analysis_expression  //CHANGE THIS <<<<<<
 */
function lis_expression_views_api() {
  return array(
    'api' => 3.0,
  );
}


// ****NOTE****: theme name 'lis_expression_profiles' used in chado_node.inc [in fn lis_expression_node_view(]

//[ TESTING HOOK_NODE_VIEW INSIDE .module file instead of in .chado_node.inc]
/**
 * Implements hook_node_view().
 *
 * @ingroup tripal_exp_profiles // MODIFY or REMOVE <<<<
 */

function lis_expression_node_view($node, $view_mode, $langcode) {
  switch ($node->type) {
    case 'chado_feature':
      // Show feature browser and counts
      if ($view_mode == 'full') {          
        
        $node->content['lis_expression'] = array(
          '#markup' => theme('lis_expression_profiles', array('node' => $node)),
          '#tripal_toc_id'    => 'geneexpressionprofile',
          '#tripal_toc_title' => 'Expression',
          '#weight' => -80,
        );
        /*For overriding the tripal_analysis_expression module's template
         *'tripal_analysis_expression/theme/templates/tripal_feature_expression.tpl.php' with
         * this module's 'tripal_exp_profiles/theme/templates/tripal_feature_expression.tpl.php' modified
         * by me to suit LIS needs.
         * 
        */
        //$node->content['tripal_feature_expression'] = array(
        //'#markup' => theme('tripal_feature_expression', array('node' => $node)),
        //'#tripal_toc_id' => 'figure',
        //'#tripal_toc_title' => 'Expression',
        //'#weight' => -99,
        //);
      } //if
      break;
  } //sw
} //f()


//Next create the hook_theme()  from


/**
 * Implements hook_theme().
 *
 * We need to let drupal know about our theme functions and their arguments.
 *  We create theme functions to allow users of the module to customize the
 *  look and feel of the output generated in this module
 *
 * @ingroup ?????
 */
function lis_expression_theme($existing, $type, $theme, $path) {
    $this_path = drupal_get_path('module', 'lis_expression');
    
    $items = array(
        
        //for tripal_feature page 'New panel'
        'lis_expression_profiles' => array(
        'variables' => array('node' => NULL),
        //'template' => 'lis_expression',
        'template' => 'lis_expression2', //template2 while trying refactoring code
        'path' => "$this_path/theme/templates",  //$this_path/theme/templates/tripal_feature_exp_profiles.tpl.php created
        ),
    );
    return $items;
  
}

// -------------  Don't touch the code above this line  ---------------------
//###########################################################################

   

//  SECTION:  Template Preprocess  =======================================
//                  (To pass vars to .tpl.php)


//TRYING template_preprocess to pass variable from here(.module) to tpl.php



    //Using template_preprocess(); so 'template' to be replaced by template name defined above in _theme()
    //  (CAUTION:  there is a chance that it could be the 'module-name' instead of the template-name)
function lis_expression_preprocess(&$variables) {
    
    
    //Get the feature node from $variables
    $feature = $variables['node']->feature;
    
    $feature_type_name = $feature->type_id->name;  //is feature type='gene'
    $gene_uniquename = $feature->uniquename;
    $gene_name = $feature->name;
    $variables['feature_type_name'] = $feature_type_name;
    $variables['gene_uniquename'] = $gene_uniquename;
    $variables['gene_name'] = $gene_name;
    
    
    ////Number of Datasets available for this gene
    $sql_get_datasets = "SELECT DISTINCT d.dataset_id, d.shortname, d.accession_no FROM ongenome.dataset d, ongenome.expressiondata e, ongenome.genemodel gm  WHERE d.dataset_id=e.dataset_id  and e.genemodel_id = gm.genemodel_id and gm.chado_uniquename = :gene_uniquename";  //ongenome
    $result_get_datasets = db_query($sql_get_datasets, array(':gene_uniquename' => $gene_uniquename));
    $dataset_count = $result_get_datasets->rowCount();
    //
    $variables['dataset_count'] = $dataset_count;

    
    $count = 0;
    $accession_no = '';
    global $dataset_shortname;
    $dataset_shortname = '';
    foreach ($result_get_datasets as $rec) {
        $count = $count + 1;
        $dataset_id = $rec->dataset_id;
        $dataset_accession_no = $rec->accession_no;
        $dataset_shortname = $rec->shortname;
        //print $count."."."<b>"."&nbsp;&nbsp;".$dataset_accession_no.": "."</b>".$dataset_shortname."<br/>";
        //print "<b>".$rec->shortname."</b>"." (dataset_id:".$rec->dataset_id.")"."<br/>";
    }
  
    $variables['dataset_id'] = $dataset_id;
    $variables['dataset_accession_no'] = $dataset_accession_no;
    $variables['dataset_shortname'] = $dataset_shortname;
  
  
  
  
}  //template preprocess
//>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>




//  SECTION:  Form Creation: Dataset list dropdown  =============================================


//Trying form <<<<<
function lis_expression_form_datasets_dropdown ($form, &$form_state) {  //list of datasets dropdown
    //the form_id is 'lis_expression_form_datasets_dropdown'
    
    //Get the gene unique-name from tpl.php via the drupal-get-form
    $geneUniquename = $form_state['build_info']['args'][0];  //Specified in tpl.php as extra arg in drupal_get_form()
    //Get the array of datasets for this genemodel
    $datasets_r = uniquename_to_datasets($geneUniquename);
    
    //Generate the $options array(assoc.) of avail datasets(acc_no => shortname)
    $options[''] = ['Choose a dataset']; //the blank option element
//** NOTE: ideally the page should load with the first option element.
//   Not able to achieve this in Drupal form (On page load, submit form with default/available values) 
    foreach ($datasets_r as $d) {
        $options[$d['acn']] = $d['acn'].": ".$d['snm'];
    }
    //drupal_set_message($options);
    
    
    //Define the dropdown form
    $form = array();
    
    $form['datasets'] = array(
        '#type'=>'select',
        //'#title'=>t('Select a dataset'),
        //'#options'=>array('cicar1' => 'Dataset-1', 'phavu1' => 'Dataset-2', 'cajca1' => 'Dataset-3', 'vigun1' => 'Dataset-4'), //For testing only
        '#options'=> $options,
        //'#prefix' => '<div id=\'dataset-list\'>',
        //'#suffix' => '</div>', 
        '#ajax' => array(
            'callback' => 'lis_expression_form_datasets_dropdown_submit',
            //'callback' => 'generate_html',
            'wrapper' => 'main-div', //this 'div and its content' is updated by this function
            'progress' => array('type' => 'bar', 'message' => t('Please wait...')), //progress bar
            
        )  //ajax array
    ); // form
    
    return $form;
}  //fn lis_expression_form_datasets_dropdown

//<<<<<<<<<<<<<  EXPERIMENTAL form alter

/*  for debug
function lis_expression_form_alter(&$form, &$form_state, $form_id) {
//function lis_expression_form_testform_alter(&$form, &$form_state, $form_id) {

     print '<pre>';var_dump(get_defined_vars()); print '</pre>';
    //drupal_set_message($form_id);

  switch ($form_id)  {
  //
      case 'lis_expression_testform':
          $form['lis_expression_testform'] = array(
              '#type' => 'select',
              '#title'=>t('SOME TITLE'),
              '#ajax' => array(
                    'callback' => 'lis_expression_testform_submit',
                    //'callback' => 'generate_html',
                    'wrapper' => 'extra-div', //this 'div and its content' is updated by this function
                    'progress' => array('type' => 'bar', 'message' => t('Please wait...')), //progress bar
                    
              )
          );
          
      break;
  } //sw
  //return $form;
  
} //fn


function lis_expression_testform_submit ($form, &$form_state) {
    $form_state['rebuild'] = TRUE;
    $selected = $form_state['values']['lis_expression_testform'];
    drupal_set_message("Testform message: ");
    
    $html_x_div = "";
    $html_x_div .= "<div id='extra-div'>";
    $html_x_div .= "<p>Print something here: ".  "XTRA XTRA". "</p>";
    
    
    
    
    $html_x_div .= "</div>"; //**IMP
    
    return $html_x_div;
}
*/ //for debug


//>>>>>>>>>>>>>>>>>>>>>>>>>   Experimental


function lis_expression_form_datasets_dropdown_submit ($form, &$form_state) {
    //$form_state['storage']['xyz'] = $form_state['values']['xyz'];
    
    $form_state['rebuild'] = TRUE; 
    //$variables['abcd'] =   $form_state['values']['xyz'];
    //$selected = isset($form_state['values']['datasets']) ? $form_state['values']['datasets']:1;
    $selected = $form_state['values']['datasets']; // This is dataset.accession_no

    
    //If a valid dataset isn't selected, stop with a message
    if (!$selected) {
      //Must created the entire main-div content including start and end tags
      $html_main_div = "";
      //**IMP
      $html_main_div .= "<div id='main-div'>"; //**IMP: Must include this, else, fails to display change the 2nd time select element is changed.
      $html_main_div .= "<b> ??? &nbsp;&nbsp;&nbsp;...&nbsp;&nbsp;&nbsp;Please Choose a Dataset from the Dropdown Above.</b>";
      $html_main_div .= "</div>"; //**IMP
      return $html_main_div;
    }  // 
    
    
    //Get the gene unique-name from tpl.php via the drupal-get-form
    //Repeated here (also in _form_dropdown)
    $geneUniquename = $form_state['build_info']['args'][0];  //Specified in tpl.php as extra arg in drupal_get_form()
    
    //    <<<<<  Display Dataset Details  ..........
    //    Testing now.
    
    $dataset_details = get_dataset_details($selected); //gets acc and shortname
    $shortname = $dataset_details['shortname'];
    $name = $dataset_details['name'];
    
   

    
    //drupal_set_message("After lis_expression_form_datasets_dropdown_submit"." with "."dataset:".$selected);

    
    //Build content for the main-div including its own <div> tags    
    $html_main_div = "";
    //**IMP
    $html_main_div_top .= "<div id='main-div'>"; //**IMP: Must include this, else, fails to display change the 2nd time select element is changed.
    $html_main_div_top .= "<p>Main Div:</p>";  //REMOVE LATER
    $html_main_div_header  = "Expression in Dataset <strong>". $selected . ":</strong> ". $name . "." ;
    $html_main_div_header .= "<p>More expression to follow for: ". $shortname ." ....  .... " . "</p>";
    
    
    //Get a div and content for genemodel-expression-data here
        //preferably let a function create the 'div' and its 'html content'
    
    $html_main_div_genelevel_data = create_html_main_div_genelevel_data ($gene=$geneUniquename, $acc=$selected);// function call here
    
    
    
    //   .............................................>>>>    
    
    
    $html_main_div_end = "</div>"; //**IMP
    $html_main_div  = $html_main_div_top;
    $html_main_div .= $html_main_div_header;
    $html_main_div .= $html_main_div_genelevel_data;
    $html_main_div .= "<p>...  ... ... </p>";
    $html_main_div .= $html_main_div_end; 
     
    return $html_main_div;  //this line makes drupal-set-message fail, sometimes(!!) ???
}


//####   AVAILABLE VARIABLES

  //Available Variables:
  //print '<pre>';var_dump(get_defined_vars()); print '</pre>';     


//####   DEFINED FUNCTIONS FOR TESTING ####






  

